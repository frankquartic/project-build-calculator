{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","undefined","handleChoiceChange","bind","handleInputChange","event","target","name","this","setState","value","parseInt","current_var","calculate","prevState","newState","result","data_size","num_days","granularity","num_bytes","num_tags","Math","ceil","floor","isNaN","style","onChange","type","disabled","border","display","checked","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c44aa040.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      \"current_var\": \"num_tags\",\n      \"data_size\": undefined,\n      \"num_tags\": undefined,\n      \"num_bytes\": 8,\n      \"num_days\": undefined,\n      \"granularity\": undefined,\n    }\n    this.handleChoiceChange = this.handleChoiceChange.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const name = target.name;\n\n    this.setState(state => {\n      if (target.value === \"\"){\n        state[name] = undefined\n      } else {\n        state[name] = parseInt(target.value, 10)\n      }\n\n      state[state.current_var] = this.calculate()\n      return state\n    });\n  }\n\n  handleChoiceChange(event) {\n    const target = event.target;\n    const name = target.value;\n    this.setState(prevState => {\n      var newState = prevState\n      newState.current_var = name\n      return newState\n    });\n  }\n\n  calculate() {\n    const current_var = this.state.current_var\n\n    const data_size = this.state.data_size\n    const num_days = this.state.num_days\n    const granularity = this.state.granularity\n    const num_bytes = this.state.num_bytes\n    const num_tags = this.state.num_tags\n\n    var result;\n    if (this.state.current_var === \"num_tags\") {\n      result = Math.ceil(data_size * (1024 * 1024 * 1024) / (num_days * 24 * 3600 * (1000.0 / granularity)) / num_bytes)\n    } else if (this.state.current_var === \"data_size\") {\n      result = Math.floor(num_tags * ((num_days * 24 * 3600) * (1000.0 / granularity)) * num_bytes / (1024 * 1024 * 1024))\n    } else if (this.state.current_var === \"num_days\") {\n      result = Math.ceil(data_size * (1024 * 1024 * 1024)/ num_tags / (24 * 3600 * (1000.0 / granularity)) * num_bytes)\n    } else if (this.state.current_var === \"granularity\") {\n      result = Math.ceil(data_size * (1024 * 1024 * 1024) / num_tags / (num_days * 24 * 3600) / num_bytes)\n    }\n\n    if(isNaN(result)) {\n      return undefined\n    } else {\n      return result\n    }\n  }\n\n  render() {\n    return(\n      <div style={{\"margin\": 20}}>\n        <form>\n          <label>\n            Target:\n            <select value={this.state.current_var} onChange={this.handleChoiceChange}>\n            <option value=\"data_size\">Training Data Size</option>\n            <option value=\"num_tags\">Number of Tags</option>\n            <option value=\"num_days\">Number of Days</option>\n            <option value=\"granularity\">Granularity</option>\n          </select>\n          </label>\n          <label>\n            Training data size (GB):\n            <input type=\"number\" name=\"data_size\" disabled={this.state.current_var === \"data_size\" ? \"disabled\": \"\"}\n            value={this.state.data_size} style={{border: this.state.current_var === \"data_size\" ? \"2px solid red\": \"\"}} onChange={this.handleInputChange}/>\n          </label>\n          <label>\n            Number of tags:\n            <input type=\"number\" name=\"num_tags\" disabled={this.state.current_var === \"num_tags\" ? \"disabled\": \"\"}\n            value={this.state.num_tags} style={{border: this.state.current_var === \"num_tags\" ? \"2px solid red\": \"\"}} onChange={this.handleInputChange}/>\n          </label>\n          <label>\n            Data type:\n          </label>\n            <div style={{display: \"flex\"}}>\n              <label style={{\"margin\": \"8px\"}}>\n                <input type=\"radio\" name=\"num_bytes\" value=\"4\" checked={this.state.num_bytes === 4} onChange={this.handleInputChange}/>Float (4 bytes)\n              </label>\n              <label style={{\"margin\": \"8px\"}}>\n                <input type=\"radio\" name=\"num_bytes\" value=\"8\" checked={this.state.num_bytes === 8} onChange={this.handleInputChange}/>Double (8 bytes)\n              </label>\n            </div>\n          <label>\n            Number of days:\n            <input type=\"number\" name=\"num_days\" disabled={this.state.current_var === \"num_days\" ? \"disabled\": \"\"}\n            value={this.state.num_days} style={{border: this.state.current_var === \"num_days\" ? \"2px solid red\": \"\"}} onChange={this.handleInputChange}/>\n          </label>\n          <label>\n            granularity (ms):\n            <input type=\"number\" name=\"granularity\" disabled={this.state.current_var === \"granularity\" ? \"disabled\": \"\"}\n            value={this.state.granularity} style={{border: this.state.current_var === \"granularity\" ? \"2px solid red\": \"\"}} onChange={this.handleInputChange} />\n          </label>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}